package ar.com.cgarcete.demo.controller;

import java.util.List;
import java.util.Optional;

import org.apache.log4j.Logger;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import ar.com.cgarcete.demo.dao.PersonDAO;
import ar.com.cgarcete.demo.entity.Person;

@RestController 
@RequestMapping(path="/persons")
public class PersonRestController {
	
	// This means to get the bean called PersonService
    // Which is auto-generated by Spring, we will use it to handle the data
	@Autowired
	private PersonDAO personService;
	
	private Logger logger = Logger.getLogger(PersonRestController.class);

	@GetMapping
	public ResponseEntity<List<Person>>  getAllPersons() {
		logger.info("GET ALL PERSONS - ");
		
		List<Person> listOfPerson = personService.findAll();
		
		if(listOfPerson.size()==0) {
			return new ResponseEntity<>(listOfPerson, HttpStatus.NO_CONTENT); //204
		}
		else if(listOfPerson.size()>=1) {
			return new ResponseEntity<>(listOfPerson, HttpStatus.OK); //200
		}
		else {
			return new ResponseEntity<>(HttpStatus.NOT_FOUND); //404
		}
	}
	
	@GetMapping("/{id}")
	public ResponseEntity<?> findById(@PathVariable("id") Long id) {
		logger.info("GET ONE PERSON BY ID: - "+ id);
		Person person = personService.findOne(id);
		
		if(person != null) {
			return new ResponseEntity<>(person, HttpStatus.OK);
		}else {
			return new ResponseEntity<>(HttpStatus.NO_CONTENT);
		}
	}
	
	@PostMapping
	public ResponseEntity<?> save(@RequestBody Person person) {
		logger.info("POST - "	+	person.toString());
		personService.save(person);
		
		return new ResponseEntity<>("Persona creada.", HttpStatus.OK);
	}
	
	@PutMapping("/{id}")
	public ResponseEntity<?> updatePerson(@PathVariable("id") Long id, @RequestBody Person person) {
		logger.info("PUT - "	+	person.toString());
		Optional<Person> propietarioActualizado = personService.update(id, person);
		
		if (propietarioActualizado.isPresent()) {
			return ResponseEntity.ok().body("Persona "+id+ " actualizada.");
		}else {
			return new ResponseEntity<>("La persona "+id+" no existe.", HttpStatus.NOT_FOUND);
		}
		
	}

	@DeleteMapping("/{id}")
	public ResponseEntity<?> deletePerson(@PathVariable("id") Long id) {
		logger.info("DELETE - ");
		Optional<Person> person = personService.delete(id);
		
		if (person.isPresent()) {
			return ResponseEntity.ok().body("Persona "+id+" eliminada.");
		}else {
			return new ResponseEntity<>("La persona  con "+id+" no existe.",HttpStatus.NOT_FOUND);
		}
		
	}
}
